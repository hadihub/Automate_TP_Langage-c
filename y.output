Terminals unused in grammar

   tMain
   tReturn
   tConst
   tPrintf


Rules useless in parser due to conflicts

   12 Instructions: Instructions Instructions


State 16 conflicts: 4 shift/reduce
State 23 conflicts: 5 shift/reduce
State 34 conflicts: 1 shift/reduce
State 38 conflicts: 4 shift/reduce, 5 reduce/reduce
State 68 conflicts: 7 shift/reduce
State 69 conflicts: 7 shift/reduce
State 70 conflicts: 7 shift/reduce
State 71 conflicts: 7 shift/reduce
State 72 conflicts: 7 shift/reduce
State 73 conflicts: 7 shift/reduce
State 74 conflicts: 7 shift/reduce


Grammar

    0 $accept: start $end

    1 start: Prog

    2 Prog: Fonctions

    3 Fonctions: %empty
    4          | Fonction Fonctions

    5 Fonction: tInt tId tPo Args tPf Body

    6 Args: %empty
    7     | tInt tId ListArgs

    8 ListArgs: %empty
    9         | tVir tInt tId ListArgs

   10 Body: tAo Instructions tAf

   11 Instructions: %empty
   12             | Instructions Instructions
   13             | Dec
   14             | If
   15             | While
   16             | Affect
   17             | Invoc

   18 Invoc: tId tPo Params tPf tPvir

   19 Params: %empty
   20       | Param
   21       | Param tVir ListParams

   22 ListParams: Param
   23           | Param tVir ListParams

   24 Param: ExprArith

   25 ExprArith: ExprArith tPlus ExprArith
   26          | ExprArith tMoin ExprArith
   27          | ExprArith tFois ExprArith
   28          | ExprArith tDivise ExprArith
   29          | ExprArith tOu ExprArith
   30          | ExprArith tEt ExprArith
   31          | ExprArith tDoubleEgal ExprArith
   32          | tId
   33          | tEntier

   34 If: tIf tPo ExprArith tPf Body
   35   | tIf tPo ExprArith tPf Body tElse Body

   36 While: tWhile tPo ExprArith tPf Body

   37 Affect: tId tEgal ExprArith tPvir

   38 Dec: tInt Dec1 tPvir
   39    | tInt DecN tPvir

   40 DecN: Dec1
   41     | Dec1 tVir DecN

   42 Dec1: tId
   43     | tId tEgal ExprArith


Terminals, with rules where they appear

$end (0) 0
error (256)
tMain (258)
tIf (259) 34 35
tElse (260) 35
tWhile (261) 36
tAo (262) 10
tAf (263) 10
tPo (264) 5 18 34 35 36
tPf (265) 5 18 34 35 36
tVir (266) 9 21 23 41
tPvir (267) 18 37 38 39
tEgal (268) 37 43
tDivise (269) 28
tMoin (270) 26
tPlus (271) 25
tFois (272) 27
tReturn (273)
tInt (274) 5 7 9 38 39
tEt (275) 30
tOu (276) 29
tDoubleEgal (277) 31
tConst (278)
tPrintf (279)
tEntier (280) 33
tId (281) 5 7 9 18 32 37 42 43


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
start (28)
    on left: 1, on right: 0
Prog (29)
    on left: 2, on right: 1
Fonctions (30)
    on left: 3 4, on right: 2 4
Fonction (31)
    on left: 5, on right: 4
Args (32)
    on left: 6 7, on right: 5
ListArgs (33)
    on left: 8 9, on right: 7 9
Body (34)
    on left: 10, on right: 5 34 35 36
Instructions (35)
    on left: 11 12 13 14 15 16 17, on right: 10 12
Invoc (36)
    on left: 18, on right: 17
Params (37)
    on left: 19 20 21, on right: 18
ListParams (38)
    on left: 22 23, on right: 21 23
Param (39)
    on left: 24, on right: 20 21 22 23
ExprArith (40)
    on left: 25 26 27 28 29 30 31 32 33, on right: 24 25 26 27 28 29
    30 31 34 35 36 37 43
If (41)
    on left: 34 35, on right: 14
While (42)
    on left: 36, on right: 15
Affect (43)
    on left: 37, on right: 16
Dec (44)
    on left: 38 39, on right: 13
DecN (45)
    on left: 40 41, on right: 39 41
Dec1 (46)
    on left: 42 43, on right: 38 40 41


State 0

    0 $accept: . start $end

    tInt  shift, and go to state 1

    $default  reduce using rule 3 (Fonctions)

    start      go to state 2
    Prog       go to state 3
    Fonctions  go to state 4
    Fonction   go to state 5


State 1

    5 Fonction: tInt . tId tPo Args tPf Body

    tId  shift, and go to state 6


State 2

    0 $accept: start . $end

    $end  shift, and go to state 7


State 3

    1 start: Prog .

    $default  reduce using rule 1 (start)


State 4

    2 Prog: Fonctions .

    $default  reduce using rule 2 (Prog)


State 5

    4 Fonctions: Fonction . Fonctions

    tInt  shift, and go to state 1

    $default  reduce using rule 3 (Fonctions)

    Fonctions  go to state 8
    Fonction   go to state 5


State 6

    5 Fonction: tInt tId . tPo Args tPf Body

    tPo  shift, and go to state 9


State 7

    0 $accept: start $end .

    $default  accept


State 8

    4 Fonctions: Fonction Fonctions .

    $default  reduce using rule 4 (Fonctions)


State 9

    5 Fonction: tInt tId tPo . Args tPf Body

    tInt  shift, and go to state 10

    $default  reduce using rule 6 (Args)

    Args  go to state 11


State 10

    7 Args: tInt . tId ListArgs

    tId  shift, and go to state 12


State 11

    5 Fonction: tInt tId tPo Args . tPf Body

    tPf  shift, and go to state 13


State 12

    7 Args: tInt tId . ListArgs

    tVir  shift, and go to state 14

    $default  reduce using rule 8 (ListArgs)

    ListArgs  go to state 15


State 13

    5 Fonction: tInt tId tPo Args tPf . Body

    tAo  shift, and go to state 16

    Body  go to state 17


State 14

    9 ListArgs: tVir . tInt tId ListArgs

    tInt  shift, and go to state 18


State 15

    7 Args: tInt tId ListArgs .

    $default  reduce using rule 7 (Args)


State 16

   10 Body: tAo . Instructions tAf

    tIf     shift, and go to state 19
    tWhile  shift, and go to state 20
    tInt    shift, and go to state 21
    tId     shift, and go to state 22

    tIf       [reduce using rule 11 (Instructions)]
    tWhile    [reduce using rule 11 (Instructions)]
    tInt      [reduce using rule 11 (Instructions)]
    tId       [reduce using rule 11 (Instructions)]
    $default  reduce using rule 11 (Instructions)

    Instructions  go to state 23
    Invoc         go to state 24
    If            go to state 25
    While         go to state 26
    Affect        go to state 27
    Dec           go to state 28


State 17

    5 Fonction: tInt tId tPo Args tPf Body .

    $default  reduce using rule 5 (Fonction)


State 18

    9 ListArgs: tVir tInt . tId ListArgs

    tId  shift, and go to state 29


State 19

   34 If: tIf . tPo ExprArith tPf Body
   35   | tIf . tPo ExprArith tPf Body tElse Body

    tPo  shift, and go to state 30


State 20

   36 While: tWhile . tPo ExprArith tPf Body

    tPo  shift, and go to state 31


State 21

   38 Dec: tInt . Dec1 tPvir
   39    | tInt . DecN tPvir

    tId  shift, and go to state 32

    DecN  go to state 33
    Dec1  go to state 34


State 22

   18 Invoc: tId . tPo Params tPf tPvir
   37 Affect: tId . tEgal ExprArith tPvir

    tPo    shift, and go to state 35
    tEgal  shift, and go to state 36


State 23

   10 Body: tAo Instructions . tAf
   12 Instructions: Instructions . Instructions

    tIf     shift, and go to state 19
    tWhile  shift, and go to state 20
    tAf     shift, and go to state 37
    tInt    shift, and go to state 21
    tId     shift, and go to state 22

    tIf     [reduce using rule 11 (Instructions)]
    tWhile  [reduce using rule 11 (Instructions)]
    tAf     [reduce using rule 11 (Instructions)]
    tInt    [reduce using rule 11 (Instructions)]
    tId     [reduce using rule 11 (Instructions)]

    Instructions  go to state 38
    Invoc         go to state 24
    If            go to state 25
    While         go to state 26
    Affect        go to state 27
    Dec           go to state 28


State 24

   17 Instructions: Invoc .

    $default  reduce using rule 17 (Instructions)


State 25

   14 Instructions: If .

    $default  reduce using rule 14 (Instructions)


State 26

   15 Instructions: While .

    $default  reduce using rule 15 (Instructions)


State 27

   16 Instructions: Affect .

    $default  reduce using rule 16 (Instructions)


State 28

   13 Instructions: Dec .

    $default  reduce using rule 13 (Instructions)


State 29

    9 ListArgs: tVir tInt tId . ListArgs

    tVir  shift, and go to state 14

    $default  reduce using rule 8 (ListArgs)

    ListArgs  go to state 39


State 30

   34 If: tIf tPo . ExprArith tPf Body
   35   | tIf tPo . ExprArith tPf Body tElse Body

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 42


State 31

   36 While: tWhile tPo . ExprArith tPf Body

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 43


State 32

   42 Dec1: tId .
   43     | tId . tEgal ExprArith

    tEgal  shift, and go to state 44

    $default  reduce using rule 42 (Dec1)


State 33

   39 Dec: tInt DecN . tPvir

    tPvir  shift, and go to state 45


State 34

   38 Dec: tInt Dec1 . tPvir
   40 DecN: Dec1 .
   41     | Dec1 . tVir DecN

    tVir   shift, and go to state 46
    tPvir  shift, and go to state 47

    tPvir  [reduce using rule 40 (DecN)]


State 35

   18 Invoc: tId tPo . Params tPf tPvir

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    $default  reduce using rule 19 (Params)

    Params     go to state 48
    Param      go to state 49
    ExprArith  go to state 50


State 36

   37 Affect: tId tEgal . ExprArith tPvir

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 51


State 37

   10 Body: tAo Instructions tAf .

    $default  reduce using rule 10 (Body)


State 38

   12 Instructions: Instructions . Instructions
   12             | Instructions Instructions .

    tIf     shift, and go to state 19
    tWhile  shift, and go to state 20
    tInt    shift, and go to state 21
    tId     shift, and go to state 22

    tIf       [reduce using rule 11 (Instructions)]
    tIf       [reduce using rule 12 (Instructions)]
    tWhile    [reduce using rule 11 (Instructions)]
    tWhile    [reduce using rule 12 (Instructions)]
    tAf       reduce using rule 11 (Instructions)
    tAf       [reduce using rule 12 (Instructions)]
    tInt      [reduce using rule 11 (Instructions)]
    tInt      [reduce using rule 12 (Instructions)]
    tId       [reduce using rule 11 (Instructions)]
    tId       [reduce using rule 12 (Instructions)]
    $default  reduce using rule 11 (Instructions)

    Instructions  go to state 38
    Invoc         go to state 24
    If            go to state 25
    While         go to state 26
    Affect        go to state 27
    Dec           go to state 28


State 39

    9 ListArgs: tVir tInt tId ListArgs .

    $default  reduce using rule 9 (ListArgs)


State 40

   33 ExprArith: tEntier .

    $default  reduce using rule 33 (ExprArith)


State 41

   32 ExprArith: tId .

    $default  reduce using rule 32 (ExprArith)


State 42

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith
   34 If: tIf tPo ExprArith . tPf Body
   35   | tIf tPo ExprArith . tPf Body tElse Body

    tPf          shift, and go to state 52
    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59


State 43

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith
   36 While: tWhile tPo ExprArith . tPf Body

    tPf          shift, and go to state 60
    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59


State 44

   43 Dec1: tId tEgal . ExprArith

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 61


State 45

   39 Dec: tInt DecN tPvir .

    $default  reduce using rule 39 (Dec)


State 46

   41 DecN: Dec1 tVir . DecN

    tId  shift, and go to state 32

    DecN  go to state 62
    Dec1  go to state 63


State 47

   38 Dec: tInt Dec1 tPvir .

    $default  reduce using rule 38 (Dec)


State 48

   18 Invoc: tId tPo Params . tPf tPvir

    tPf  shift, and go to state 64


State 49

   20 Params: Param .
   21       | Param . tVir ListParams

    tVir  shift, and go to state 65

    $default  reduce using rule 20 (Params)


State 50

   24 Param: ExprArith .
   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    $default  reduce using rule 24 (Param)


State 51

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith
   37 Affect: tId tEgal ExprArith . tPvir

    tPvir        shift, and go to state 66
    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59


State 52

   34 If: tIf tPo ExprArith tPf . Body
   35   | tIf tPo ExprArith tPf . Body tElse Body

    tAo  shift, and go to state 16

    Body  go to state 67


State 53

   28 ExprArith: ExprArith tDivise . ExprArith

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 68


State 54

   26 ExprArith: ExprArith tMoin . ExprArith

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 69


State 55

   25 ExprArith: ExprArith tPlus . ExprArith

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 70


State 56

   27 ExprArith: ExprArith tFois . ExprArith

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 71


State 57

   30 ExprArith: ExprArith tEt . ExprArith

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 72


State 58

   29 ExprArith: ExprArith tOu . ExprArith

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 73


State 59

   31 ExprArith: ExprArith tDoubleEgal . ExprArith

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ExprArith  go to state 74


State 60

   36 While: tWhile tPo ExprArith tPf . Body

    tAo  shift, and go to state 16

    Body  go to state 75


State 61

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith
   43 Dec1: tId tEgal ExprArith .

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    $default  reduce using rule 43 (Dec1)


State 62

   41 DecN: Dec1 tVir DecN .

    $default  reduce using rule 41 (DecN)


State 63

   40 DecN: Dec1 .
   41     | Dec1 . tVir DecN

    tVir  shift, and go to state 46

    $default  reduce using rule 40 (DecN)


State 64

   18 Invoc: tId tPo Params tPf . tPvir

    tPvir  shift, and go to state 76


State 65

   21 Params: Param tVir . ListParams

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ListParams  go to state 77
    Param       go to state 78
    ExprArith   go to state 50


State 66

   37 Affect: tId tEgal ExprArith tPvir .

    $default  reduce using rule 37 (Affect)


State 67

   34 If: tIf tPo ExprArith tPf Body .
   35   | tIf tPo ExprArith tPf Body . tElse Body

    tElse  shift, and go to state 79

    $default  reduce using rule 34 (If)


State 68

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   28          | ExprArith tDivise ExprArith .
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    tDivise      [reduce using rule 28 (ExprArith)]
    tMoin        [reduce using rule 28 (ExprArith)]
    tPlus        [reduce using rule 28 (ExprArith)]
    tFois        [reduce using rule 28 (ExprArith)]
    tEt          [reduce using rule 28 (ExprArith)]
    tOu          [reduce using rule 28 (ExprArith)]
    tDoubleEgal  [reduce using rule 28 (ExprArith)]
    $default     reduce using rule 28 (ExprArith)


State 69

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   26          | ExprArith tMoin ExprArith .
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    tDivise      [reduce using rule 26 (ExprArith)]
    tMoin        [reduce using rule 26 (ExprArith)]
    tPlus        [reduce using rule 26 (ExprArith)]
    tFois        [reduce using rule 26 (ExprArith)]
    tEt          [reduce using rule 26 (ExprArith)]
    tOu          [reduce using rule 26 (ExprArith)]
    tDoubleEgal  [reduce using rule 26 (ExprArith)]
    $default     reduce using rule 26 (ExprArith)


State 70

   25 ExprArith: ExprArith . tPlus ExprArith
   25          | ExprArith tPlus ExprArith .
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    tDivise      [reduce using rule 25 (ExprArith)]
    tMoin        [reduce using rule 25 (ExprArith)]
    tPlus        [reduce using rule 25 (ExprArith)]
    tFois        [reduce using rule 25 (ExprArith)]
    tEt          [reduce using rule 25 (ExprArith)]
    tOu          [reduce using rule 25 (ExprArith)]
    tDoubleEgal  [reduce using rule 25 (ExprArith)]
    $default     reduce using rule 25 (ExprArith)


State 71

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   27          | ExprArith tFois ExprArith .
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    tDivise      [reduce using rule 27 (ExprArith)]
    tMoin        [reduce using rule 27 (ExprArith)]
    tPlus        [reduce using rule 27 (ExprArith)]
    tFois        [reduce using rule 27 (ExprArith)]
    tEt          [reduce using rule 27 (ExprArith)]
    tOu          [reduce using rule 27 (ExprArith)]
    tDoubleEgal  [reduce using rule 27 (ExprArith)]
    $default     reduce using rule 27 (ExprArith)


State 72

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   30          | ExprArith tEt ExprArith .
   31          | ExprArith . tDoubleEgal ExprArith

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    tDivise      [reduce using rule 30 (ExprArith)]
    tMoin        [reduce using rule 30 (ExprArith)]
    tPlus        [reduce using rule 30 (ExprArith)]
    tFois        [reduce using rule 30 (ExprArith)]
    tEt          [reduce using rule 30 (ExprArith)]
    tOu          [reduce using rule 30 (ExprArith)]
    tDoubleEgal  [reduce using rule 30 (ExprArith)]
    $default     reduce using rule 30 (ExprArith)


State 73

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   29          | ExprArith tOu ExprArith .
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    tDivise      [reduce using rule 29 (ExprArith)]
    tMoin        [reduce using rule 29 (ExprArith)]
    tPlus        [reduce using rule 29 (ExprArith)]
    tFois        [reduce using rule 29 (ExprArith)]
    tEt          [reduce using rule 29 (ExprArith)]
    tOu          [reduce using rule 29 (ExprArith)]
    tDoubleEgal  [reduce using rule 29 (ExprArith)]
    $default     reduce using rule 29 (ExprArith)


State 74

   25 ExprArith: ExprArith . tPlus ExprArith
   26          | ExprArith . tMoin ExprArith
   27          | ExprArith . tFois ExprArith
   28          | ExprArith . tDivise ExprArith
   29          | ExprArith . tOu ExprArith
   30          | ExprArith . tEt ExprArith
   31          | ExprArith . tDoubleEgal ExprArith
   31          | ExprArith tDoubleEgal ExprArith .

    tDivise      shift, and go to state 53
    tMoin        shift, and go to state 54
    tPlus        shift, and go to state 55
    tFois        shift, and go to state 56
    tEt          shift, and go to state 57
    tOu          shift, and go to state 58
    tDoubleEgal  shift, and go to state 59

    tDivise      [reduce using rule 31 (ExprArith)]
    tMoin        [reduce using rule 31 (ExprArith)]
    tPlus        [reduce using rule 31 (ExprArith)]
    tFois        [reduce using rule 31 (ExprArith)]
    tEt          [reduce using rule 31 (ExprArith)]
    tOu          [reduce using rule 31 (ExprArith)]
    tDoubleEgal  [reduce using rule 31 (ExprArith)]
    $default     reduce using rule 31 (ExprArith)


State 75

   36 While: tWhile tPo ExprArith tPf Body .

    $default  reduce using rule 36 (While)


State 76

   18 Invoc: tId tPo Params tPf tPvir .

    $default  reduce using rule 18 (Invoc)


State 77

   21 Params: Param tVir ListParams .

    $default  reduce using rule 21 (Params)


State 78

   22 ListParams: Param .
   23           | Param . tVir ListParams

    tVir  shift, and go to state 80

    $default  reduce using rule 22 (ListParams)


State 79

   35 If: tIf tPo ExprArith tPf Body tElse . Body

    tAo  shift, and go to state 16

    Body  go to state 81


State 80

   23 ListParams: Param tVir . ListParams

    tEntier  shift, and go to state 40
    tId      shift, and go to state 41

    ListParams  go to state 82
    Param       go to state 78
    ExprArith   go to state 50


State 81

   35 If: tIf tPo ExprArith tPf Body tElse Body .

    $default  reduce using rule 35 (If)


State 82

   23 ListParams: Param tVir ListParams .

    $default  reduce using rule 23 (ListParams)
